################################################################################
##### Setup this script and get the current gh-pages branch.               #####
echo 'Setting up the script...'
# Exit with nonzero exit code if anything fails
set -e

# Create a clean working directory for this script.
mkdir /usr/src/dists
cd /usr/src/dists

# Get the current gh-pages branch
git clone -b gh-pages https://git@$GH_REPO_REF
cd $GH_REPO_NAME

##### Configure git.
# Set the push default to simple i.e. push only the current branch.
git config --global push.default simple
# Pretend to be an user called Travis CI.
git config user.name "Travis CI"
git config user.email "travis@travis-ci.org"

# Remove everything currently in the gh-pages branch.
# GitHub is smart enough to know which files have changed and which files have
# stayed the same and will only update the changed files. So the gh-pages branch
# can be safely cleaned, and it is sure that everything pushed later is the new
# documentation.
CURRENTCOMMIT=`git rev-parse HEAD`
git reset --hard `git rev-list HEAD | tail -n 1`
git reset --soft $CURRENTCOMMIT

echo 'Setup package dir...'
RELEASE=`lsb_release -sc`
ARCH=`dpkg-architecture -q DEB_BUILD_ARCH`

mkdir -vp dists/$RELEASE/main/source/net

cp -v /usr/src/*.tar.* /usr/src/*.dsc dists/$RELEASE/main/source/net

mkdir -vp dists/$RELEASE/main/binary-$ARCH

cp -v /usr/src/*_${ARCH}.* dists/$RELEASE/main/binary-$ARCH

echo 'Generating index files...'

/usr/bin/dpkg-scanpackages dists/$RELEASE/main/binary-$ARCH |\
	gzip -9 > dists/$RELEASE/main/binary-$ARCH/Packages.gz

/usr/bin/dpkg-scansources dists/$RELEASE/main/source |\
	gzip -9 > dists/$RELEASE/main/source/Sources.gz

echo 'Generating index.html files...'

bash make_index

    echo 'Uploading documentation to the gh-pages branch...'
    # Add everything in this directory (the Doxygen code documentation) to the
    # gh-pages branch.
    # GitHub is smart enough to know which files have changed and which files have
    # stayed the same and will only update the changed files.
    git add --all

    # Commit the added files with a title and description containing the Travis CI
    # build number and the GitHub commit reference that issued this build.
    git commit -m "Deploy packages to GitHub Pages, Travis build: ${TRAVIS_BUILD_NUMBER}" -m "Commit: ${TRAVIS_COMMIT}" -m "Gnunet Commit: ${GNUNET_COMMIT}"

    # Force push to the remote gh-pages branch.
    # The ouput is redirected to /dev/null to hide any sensitive credential data
    # that might otherwise be exposed.
    git push --force "https://${GH_REPO_TOKEN}@${GH_REPO_REF}" > /dev/null 2>&1
